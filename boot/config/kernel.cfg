# Name of the kernel log file
kernel.logname: rescue.log

# Where to look for jars that might contain factories, gis, perception, communication, agents, simulators, viewers.
jars.dir: ../jars
# Whether to inspect jars for likely-looking class names. If false (or "no") then only the manifest will be read. If true (or "yes") then all classes in the jar will be tested to see if they are implementations of the various interfaces.
jars.inspect: yes

# Number of timesteps to run
kernel.timesteps: 300

# The amount of time agents have to send commands in ms
kernel.agents.think-time: 1000
# Number of timesteps that agents commands are ignored
kernel.agents.ignoreuntil: 3

# Kernel TCP listen port
kernel.io.port: 7000

# List of command filters to use
kernel.commandfilters=kernel.standard.FrozenAgentsCommandFilter kernel.standard.DeadAgentsCommandFilter

# The initial agent processor
kernel.agents.processor=kernel.standard.StandardAgentProcessor

# The amount of time agents have to start up
kernel.startup.connect-time=300000 # 5 minute startup time
# kernel.startup.connect-time=10000 # 10 second startup time

# Automatic choice of GiS
# kernel.gis.auto=kernel.standard.InlineWorldModelCreator

# Automatic choice of perception
# kernel.perception.auto=kernel.standard.TunableStandardPerception

# Automatic choice of communication model
# kernel.communication.auto=kernel.standard.StandardCommunicationModel

# Automatically start simulators/viewers/agents
# kernel.simulators.auto: sample.SampleSimulator
# kernel.viewers.autostart: sample.SampleViewer
# kernel.agents.autostart: rescuecore2.sample.SampleFireBrigade*100 rescuecore2.sample.SamplePoliceForce*100 rescuecore2.sample.SampleAmbulanceTeam*100 rescuecore2.sample.SampleCentre*100

# Kernel UI components
kernel.ui.components=kernel.ui.StandardWorldModelViewerComponent
