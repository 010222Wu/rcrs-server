<project default="jars" name="Robocup rescue simulation software">
  <!-- Common properties: source, build, jar and lib directories -->
  <property name="src.dir" value="${basedir}/src"/>
  <property name="build.dir" value="${basedir}/build"/>
  <property name="jar.dir" value="${basedir}/jars"/>
  <property name="lib.dir" value="${basedir}/lib"/>

  <!-- Compiled classes go here -->
  <property name="classes.dir" value="${build.dir}/classes"/>

  <!-- Directory containing JUnit test classes -->
  <property name="test.dir" value="${basedir}/test"/>

  <!-- Output directories for JUnit, Checkstyle, Findbugs and Cobertura -->
  <property name="junit.output.dir" value="${build.dir}/junit-results"/>
  <property name="checkstyle.output.dir" value="${build.dir}/checkstyle-results"/>
  <property name="findbugs.output.dir" value="${build.dir}/findbugs-results"/>
  <property name="cobertura.output.dir" value="${build.dir}/cobertura-results"/>
  <property name="cobertura.coveragefile" value="${cobertura.output.dir}/cobertura.ser"/>
  <property name="cobertura.instrument.dir" value="${build.dir}/jars-instrumented"/>

  <!-- Supplementary stuff like the checkstyle definition file -->
  <property name="supplement.dir" value="${basedir}/supplement"/>

  <!-- The type of output for findbugs and cobertura. Can be HTML or XML -->
  <property name="findbugs.output.format" value="html"/>
  <property name="cobertura.output.format" value="html"/>

  <!-- Whether to compile with debugging symbols -->
  <property name="debug" value="true"/>

  <!-- General javac flags -->
  <property name="javac.flags" value="-Xlint:unchecked"/>

  <!-- Findbugs and cobertura home directories -->
  <property name="findbugs.home" value="${lib.dir}/findbugs-1.3.8"/>
  <property name="cobertura.home" value="${lib.dir}/cobertura-1.9.1"/>

  <path id="path.jars">
    <fileset dir="${jar.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="path.lib">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="path.all">
    <path refid="path.jars"/>
    <path refid="path.lib"/>
  </path>

  <path id="path.junit">
    <pathelement location="${lib.dir}/junit-4.5.jar"/>
    <path refid="path.cobertura.instrumented"/>
    <path refid="path.jars"/>
    <path refid="path.lib"/>
    <path refid="path.cobertura"/>
    <pathelement location="${test.dir}"/>
  </path>

  <path id="path.cobertura">
    <fileset dir="${cobertura.home}">
      <include name="cobertura.jar"/>
      <include name="lib/**/*.jar"/>
    </fileset>
  </path>

  <path id="path.cobertura.instrumented">
    <fileset dir="${cobertura.instrument.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <!-- Checkstyle task definition -->
  <taskdef resource="checkstyletask.properties" classpath="${lib.dir}/checkstyle-all-5.0-beta2.jar"/>

  <!-- Findbugs task definition -->
  <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.home}/lib/findbugs-ant.jar"/>

  <!-- Cobertura task definition -->
  <taskdef classpathref="path.cobertura" resource="tasks.properties"/>

  <!-- Stuff to do before a build -->
  <target name="_init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${jar.dir}"/>
    <mkdir dir="${junit.output.dir}"/>
    <mkdir dir="${checkstyle.output.dir}"/>
    <mkdir dir="${findbugs.output.dir}"/>
    <mkdir dir="${cobertura.output.dir}"/>
    <mkdir dir="${cobertura.instrument.dir}"/>
  </target>

  <!-- General compile target -->
  <target name="_compile">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="path.all" debug="${debug}">
      <include name="${module}/**/*.java"/>
      <compilerarg value="${javac.flags}"/>
    </javac>
  </target>

  <!-- General clean target -->
  <target name="_clean">
    <delete dir="${classes.dir}/${module}" failonerror="false"/>
    <delete dir="${junit.output.dir}/${module}" failonerror="false"/>
    <delete dir="${jar.dir}/${module}.jar" failonerror="false"/>
    <delete dir="${cobertura.instrument.dir}/${module}.jar" failonerror="false"/>
    <delete failonerror="false">
      <fileset dir="${test.dir}/${module}">
        <include name="**/*.class"/>
      </fileset>
    </delete>
  </target>

  <!-- General jar target -->
  <target name="_jar">
    <jar basedir="${classes.dir}" destfile="${jar.dir}/${module}.jar">
      <include name="${module}/**/*.class"/>
    </jar>
  </target>

  <!-- General junit target -->
  <target name="_junit">
    <javac srcdir="${test.dir}" destdir="${test.dir}" classpathref="path.all" debug="${debug}">
      <include name="${module}/**/*.java"/>
    </javac>
    <junit fork="true">
      <sysproperty key="tests.basedir" value="${test.dir}"/>
      <sysproperty key="net.sourceforge.cobertura.datafile" value="${cobertura.coveragefile}"/>
      <classpath refid="path.junit"/>
      <formatter type="xml"/>
      <batchtest todir="${junit.output.dir}">
        <fileset dir="${test.dir}">
          <include name="${module}/**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <!-- Rescuecore targets -->
<!--
  <target name="rescuecore-compile" depends="_init" description="Build the rescuecore package">
    <antcall target="_compile">
      <param name="module" value="rescuecore"/>
    </antcall>
  </target>

  <target name="rescuecore-clean" description="Delete all classes and build artifacts in the rescuecore package">
    <antcall target="_clean">
      <param name="module" value="rescuecore"/>
    </antcall>
  </target>

  <target name="rescuecore-jar" depends="rescuecore-compile" description="Build the rescuecore jar">
    <antcall target="_jar">
      <param name="module" value="rescuecore"/>
    </antcall>
  </target>

  <target name="rescuecore-unit" depends="rescuecore-jar" description="Run the rescuecore unit tests">
    <antcall target="_junit">
      <param name="module" value="rescuecore"/>
    </antcall>
  </target>
-->

  <!-- Rescuecore2 targets -->
  <target name="rescuecore2-compile" depends="_init" description="Build the rescuecore2 package">
    <antcall target="_compile">
      <param name="module" value="rescuecore2"/>
    </antcall>
  </target>

  <target name="rescuecore2-clean" description="Delete all classes and build artifacts in the rescuecore2 package">
    <antcall target="_clean">
      <param name="module" value="rescuecore2"/>
    </antcall>
  </target>

  <target name="rescuecore2-jar" depends="rescuecore2-compile" description="Build the rescuecore2 jar">
    <antcall target="_jar">
      <param name="module" value="rescuecore2"/>
    </antcall>
  </target>

  <target name="rescuecore2-unit" depends="rescuecore2-jar" description="Run the rescuecore2 unit tests">
    <antcall target="_junit">
      <param name="module" value="rescuecore2"/>
    </antcall>
  </target>

  <!-- Kernel targets -->
  <target name="kernel-compile" depends="_init,rescuecore2-jar" description="Build the kernel package">
    <antcall target="_compile">
      <param name="module" value="kernel"/>
    </antcall>
  </target>

  <target name="kernel-clean" description="Delete all classes and build artifacts in the kernel package">
    <antcall target="_clean">
      <param name="module" value="kernel"/>
    </antcall>
  </target>

  <target name="kernel-jar" depends="kernel-compile" description="Build the kernel jar">
    <antcall target="_jar">
      <param name="module" value="kernel"/>
    </antcall>
  </target>

  <target name="kernel-unit" depends="kernel-jar" description="Run the kernel unit tests">
    <antcall target="_junit">
      <param name="module" value="kernel"/>
    </antcall>
  </target>

  <!-- Useful tools: checkstyle, findbugs, cobertura -->
  <target name="checkstyle" depends="compile" description="Run Checkstyle on all packages">
    <checkstyle config="${supplement.dir}/checkstyle.xml" classpathref="path.all" failOnViolation="false">
      <fileset dir="${src.dir}">
        <include name="kernel/**/*.java"/>
        <include name="rescuecore2/**/*.java"/>
      </fileset>
      <formatter type="xml" toFile="${checkstyle.output.dir}/checkstyle_errors.xml"/>
    </checkstyle>
    <xslt in="${checkstyle.output.dir}/checkstyle_errors.xml" out="${checkstyle.output.dir}/checkstyle_errors.html" style="${supplement.dir}/checkstyle-noframes-sorted.xsl"/>
  </target>

  <target name="findbugs" depends="jars" description="Run Findbugs on all packages">
    <findbugs home="${findbugs.home}" output="${findbugs.output.format}" outputFile="${findbugs.output.dir}/findbugs_errors.${findbugs.output.format}">
      <sourcePath path="${src.dir}"/>
      <class location="${jar.dir}/kernel.jar"/>
      <class location="${jar.dir}/rescuecore2.jar"/>
      <auxClasspath refid="path.all"/>
    </findbugs>
  </target>

  <target name="junit" depends="cobertura-instrument,rescuecore2-unit,kernel-unit" description="Run the junit tests for all packages and generate a report">
    <junitreport todir="${junit.output.dir}">
      <fileset dir="${junit.output.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="noframes" todir="${junit.output.dir}"/>
    </junitreport>
    <junitreport todir="${junit.output.dir}">
      <fileset dir="${junit.output.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${junit.output.dir}"/>
    </junitreport>
  </target>

  <target name="cobertura-instrument" depends="jars">
    <cobertura-instrument todir="${cobertura.instrument.dir}" datafile="${cobertura.coveragefile}">
      <fileset dir="${jar.dir}">
        <include name="rescuecore2.jar"/>
        <include name="kernel.jar"/>
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="cobertura" depends="junit" description="Generate the cobertura test coverage report for all packages">
    <cobertura-report format="${cobertura.output.format}" datafile="${cobertura.coveragefile}" destdir="${cobertura.output.dir}" srcdir="${src.dir}"/>
  </target>

  <target name="build-clean">
    <delete dir="${build.dir}"/>
  </target>

  <!-- Combined targets -->
  <target name="compile" depends="rescuecore2-compile,kernel-compile" description="Compile all packages"/>

  <target name="jars" depends="rescuecore2-jar,kernel-jar" description="Compile and jar all packages"/>

  <target name="clean" depends="rescuecore2-clean,kernel-clean,build-clean" description="Delete classes and build artifacts for all packages"/>

  <target name="test-static" depends="checkstyle,findbugs" description="Run the static tests (checkstyle and findbugs) for all packages"/>

  <target name="test-unit" depends="junit,cobertura" description="Run the unit tests (junit and cobertura) for all packages"/>

  <target name="test-all" depends="test-static,test-unit" description="Run the static and unit tests for all packages"/>

  <target name="complete-build" depends="clean,compile,jars,test-all" description="Do a complete clean and rebuild: clean, compile, jar and run all tests"/>

  <target name="start-kernel" depends="kernel-jar" description="Start the kernel">
    <java classname="kernel.StartKernel" classpathref="path.all" fork="yes">
      <arg value="-c"/>
      <arg value="boot/config.txt"/>
    </java>
  </target>
</project>
