<project default="jars" name="Robocup rescue simulation software">
  <!-- Modules directory -->
  <property name="modules.dir" value="${basedir}/modules"/>

  <property name="modules" value="rescuecore2,kernel"/>
  <import file="${modules.dir}/rescuecore2/build.xml" optional="true"/>
  <import file="${modules.dir}/kernel/build.xml" optional="true"/>

  <!-- Common properties: modules, lib, build and jar directories -->
  <!-- 3rd party libraries used by all modules -->
  <property name="lib.dir" value="${basedir}/lib"/>
  <!-- Output directory - classes, unit test results etc -->
  <property name="build.dir" value="${basedir}/build"/>
  <!-- Output directory - jar'd class files and resources for all modules -->
  <property name="jar.dir" value="${basedir}/jars"/>

  <!-- Output directories for JUnit, Checkstyle, Findbugs and Cobertura -->
  <property name="junit.output.dir" value="${build.dir}/junit-results"/>
  <property name="checkstyle.output.dir" value="${build.dir}/checkstyle-results"/>
  <property name="findbugs.output.dir" value="${build.dir}/findbugs-results"/>
  <property name="cobertura.output.dir" value="${build.dir}/cobertura-results"/>
  <property name="cobertura.coveragefile" value="${cobertura.output.dir}/cobertura.ser"/>
  <property name="cobertura.instrument.dir" value="${build.dir}/jars-instrumented"/>

  <!-- Build tools directory -->
  <property name="buildtools.dir" value="${basedir}/build-tools"/>

  <!-- The type of output for findbugs and cobertura. Can be HTML or XML -->
  <property name="findbugs.output.format" value="html"/>
  <property name="cobertura.output.format" value="html"/>

  <!-- Whether to compile with debugging symbols -->
  <property name="debug" value="true"/>

  <!-- General javac flags -->
  <property name="javac.flags" value="-Xlint:unchecked"/>

  <!-- Findbugs and cobertura home directories -->
  <property name="findbugs.home" value="${buildtools.dir}/findbugs"/>
  <property name="cobertura.home" value="${buildtools.dir}/cobertura"/>

  <!-- Kernel startup arguments. -->
  <property name="kernel.startup.config.files.default" value="boot/kernel.cfg boot/gis.cfg boot/startup.cfg boot/comms.cfg boot/perception.cfg boot/fire.cfg boot/ui.cfg"/>
  <property name="kernel.startup.config.files.user" value=""/>
  <property name="kernel.startup.config" value=""/>
  <property name="kernel.startup.args" value=""/>

  <path id="path.jars">
    <fileset dir="${jar.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="path.lib">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="path.common">
    <path refid="path.jars"/>
    <path refid="path.lib"/>
  </path>

  <path id="path.junit">
    <path refid="path.cobertura.instrumented"/>
    <path refid="path.cobertura"/>
    <path refid="path.common"/>
  </path>

  <path id="path.cobertura">
    <fileset dir="${cobertura.home}">
      <include name="cobertura.jar"/>
      <include name="lib/**/*.jar"/>
    </fileset>
  </path>

  <path id="path.cobertura.instrumented">
    <fileset dir="${cobertura.instrument.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <!-- Checkstyle task definition -->
  <taskdef resource="checkstyletask.properties" classpath="${buildtools.dir}/checkstyle.jar"/>

  <!-- Findbugs task definition -->
  <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.home}/lib/findbugs-ant.jar"/>

  <!-- Cobertura task definition -->
  <taskdef classpathref="path.cobertura" resource="tasks.properties"/>

  <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
    <classpath>
      <pathelement location="${buildtools.dir}/ant-junit.jar"/>
    </classpath>
  </taskdef>

  <target name="_generate-kernel-config-args">
    <script language="javascript">
      <![CDATA[
        var args = project.getProperty("kernel.startup.config.files.default") + " " + project.getProperty("kernel.startup.config.files.user");
        var argArray = args.split(" ");
        var result = [];
        for (var i = 0; i < argArray.length; ++i) {
          if (argArray[i] != "") {
            result.push("-c");
            result.push(argArray[i]);
          }
        }
        project.setProperty("kernel.startup.config", result.join(" "));
      ]]>
    </script>
  </target>

  <target name="_generate-module-lib-paths" unless="path.allmodules.lib">
    <echo message="Generating module lib paths"/>
    <script language="javascript">
      <![CDATA[
        importClass(org.apache.tools.ant.types.Path);
        importClass(org.apache.tools.ant.types.FileSet);
        importClass(java.lang.System);
        importClass(java.io.File);
        var modules = project.getProperty("modules").split(",");
        var totalPath = new Path(project);
        var totalFileset = new FileSet();
        totalFileset.setDir(new File(project.getProperty("modules.dir")));
        for (var i = 0; i < modules.length; ++i) {
          var path = new Path(project);
          var fileset = new FileSet();
          var id = "path." + modules[i] + ".lib";
          fileset.setDir(new File(project.getProperty("modules.dir") + "/" + modules[i] + "/lib"));
          fileset.setIncludes("**/*.jar");
          fileset.setErrorOnMissingDir(false);
          totalFileset.setIncludes(modules[i] + "/lib/**/*.jar");
          path.addFileset(fileset);
          project.addReference(id, path);
        }
        totalPath.addFileset(totalFileset);
        project.addReference("path.allmodules.lib", totalPath);
      ]]>
    </script>
  </target>

  <target name="_generate-checkstyle-fileset">
    <script language="javascript">
      <![CDATA[
        importClass(org.apache.tools.ant.types.Path);
        importClass(org.apache.tools.ant.types.FileSet);
        importClass(java.lang.System);
        importClass(java.io.File);
        var modules = project.getProperty("modules").split(",");
        var fileset = new FileSet();
        fileset.setDir(new File(project.getProperty("modules.dir")));
        for (var i = 0; i < modules.length; ++i) {
          fileset.setIncludes(modules[i] + "/src/**/*.java");
        }
        project.addReference("checkstyle.files", fileset);
      ]]>
    </script>
  </target>

  <!-- Stuff to do before anything else -->
  <target name="_init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${jar.dir}"/>
    <mkdir dir="${junit.output.dir}"/>
    <mkdir dir="${checkstyle.output.dir}"/>
    <mkdir dir="${findbugs.output.dir}"/>
    <mkdir dir="${cobertura.output.dir}"/>
    <mkdir dir="${cobertura.instrument.dir}"/>
  </target>

  <!-- Call another target for all modules -->
  <macrodef name="_call-for-all-modules">
    <attribute name="target"/>
    <sequential>
      <script language="javascript">
        <![CDATA[
          importClass(org.apache.tools.ant.taskdefs.Property);
          importClass(java.lang.System);
          var target = @{target};
          var modules = project.getProperty("modules").split(",");
          for (var i = 0; i < modules.length; ++i) {
            project.setProperty("module", modules[i]);
            project.executeTarget(target);
          }
        ]]>
      </script>
    </sequential>
  </macrodef>

  <!-- General compile targets -->
  <target name="_compile-modules" depends="_init, _generate-module-lib-paths">
    <_call-for-all-modules target="_compile"/>
  </target>

  <target name="_compile">
    <echo message="Compiling module ${module}"/>
    <mkdir dir="${build.dir}/${module}/classes"/>
    <javac srcdir="${modules.dir}/${module}/src" destdir="${build.dir}/${module}/classes" debug="${debug}">
      <classpath>
        <path refid="path.common"/>
        <path refid="path.${module}.lib"/>
      </classpath>
      <include name="**/*.java"/>
      <compilerarg value="${javac.flags}"/>
    </javac>
  </target>

  <!-- General clean targets -->
  <target name="_clean-modules">
    <_call-for-all-modules target="_clean"/>
  </target>

  <target name="_clean">
    <echo message="Cleaning module ${module}"/>
    <delete dir="${build.dir}/${module}" failonerror="false"/>
    <delete dir="${junit.output.dir}/${module}" failonerror="false"/>
    <delete dir="${jar.dir}/${module}.jar" failonerror="false"/>
    <delete dir="${cobertura.instrument.dir}/${module}.jar" failonerror="false"/>
    <delete failonerror="false">
      <fileset dir="${module}/test">
        <include name="**/*.class"/>
      </fileset>
    </delete>
  </target>

  <!-- General jar targets -->
  <target name="_jar-modules" depends="_compile-modules">
    <_call-for-all-modules target="_jar"/>
  </target>

  <target name="_jar">
    <jar destfile="${jar.dir}/${module}.jar">
      <fileset dir="${build.dir}/${module}/classes" includes="**/*.class"/>
      <fileset dir="${modules.dir}/${module}/resources" erroronmissingdir="false"/>
    </jar>
  </target>

  <!-- General junit targets -->
  <target name="_junit-modules" depends="_jar-modules">
    <_call-for-all-modules target="_junit"/>
  </target>

  <target name="_junit">
    <mkdir dir="${modules.dir}/${module}/test"/>
    <javac srcdir="${modules.dir}/${module}/test" destdir="${modules.dir}/${module}/test" classpathref="path.common" debug="${debug}">
      <include name="**/*.java"/>
    </javac>
    <junit fork="true">
      <sysproperty key="tests.basedir" value="${modules.dir}/${module}/test"/>
      <sysproperty key="net.sourceforge.cobertura.datafile" value="${cobertura.coveragefile}"/>
      <classpath>
        <path refid="path.junit"/>
        <pathelement location="${modules.dir}/${module}/test"/>
      </classpath>
      <formatter type="xml"/>
      <batchtest todir="${junit.output.dir}">
        <fileset dir="${modules.dir}/${module}/test">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- Useful tools: checkstyle, findbugs, cobertura -->
  <target name="checkstyle" depends="compile, _init, _generate-checkstyle-fileset" description="Run Checkstyle on all packages">
    <checkstyle config="${buildtools.dir}/checkstyle.xml" classpathref="path.common" failOnViolation="false">
      <fileset refid="checkstyle.files"/>
      <formatter type="xml" toFile="${checkstyle.output.dir}/checkstyle_errors.xml"/>
    </checkstyle>
    <xslt in="${checkstyle.output.dir}/checkstyle_errors.xml" out="${checkstyle.output.dir}/checkstyle_errors.html" style="${buildtools.dir}/checkstyle-noframes-sorted.xsl"/>
  </target>

  <target name="findbugs" depends="jars, _init, _generate-module-lib-paths" description="Run Findbugs on all modules">
    <findbugs home="${findbugs.home}" output="${findbugs.output.format}" outputFile="${findbugs.output.dir}/findbugs_errors.${findbugs.output.format}">
<!--      <sourcePath path="${src.dir}"/>-->
      <class location="${jar.dir}/kernel.jar"/>
      <class location="${jar.dir}/rescuecore2.jar"/>
      <class location="${jar.dir}/testmodule.jar"/>
      <auxClasspath refid="path.common"/>
      <auxClasspath refid="path.allmodules.lib"/>
    </findbugs>
  </target>

  <target name="junit" depends="_init, cobertura-instrument,_junit-modules" description="Run the junit tests for all packages and generate a report">
    <junitreport todir="${junit.output.dir}">
      <fileset dir="${junit.output.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="noframes" todir="${junit.output.dir}"/>
    </junitreport>
    <junitreport todir="${junit.output.dir}">
      <fileset dir="${junit.output.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${junit.output.dir}"/>
    </junitreport>
  </target>

  <target name="cobertura-instrument" depends="jars, _init">
    <cobertura-instrument todir="${cobertura.instrument.dir}" datafile="${cobertura.coveragefile}">
      <fileset dir="${jar.dir}">
        <include name="rescuecore2.jar"/>
        <include name="kernel.jar"/>
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="cobertura" depends="junit, _init" description="Generate the cobertura test coverage report for all packages">
    <cobertura-report format="${cobertura.output.format}" datafile="${cobertura.coveragefile}" destdir="${cobertura.output.dir}" srcdir="${modules.dir}"/>
  </target>

  <target name="build-clean">
    <delete dir="${build.dir}"/>
  </target>

  <!-- Combined targets -->
  <target name="compile" depends="_init, _compile-modules" description="Compile all modules"/>

  <target name="jars" depends="_init, _jar-modules" description="Compile and jar all modules"/>

  <target name="clean" depends="_clean-modules, build-clean" description="Delete classes and build artifacts for all modules"/>

  <target name="test-static" depends="checkstyle, findbugs" description="Run the static tests (checkstyle and findbugs) for all modules"/>

  <target name="test-unit" depends="junit, cobertura" description="Run the unit tests (junit and cobertura) for all modules"/>

  <target name="test-all" depends="test-static, test-unit" description="Run the static and unit tests for all modules"/>

  <target name="complete-build" depends="clean,compile,jars,test-all" description="Do a complete clean and rebuild: clean, compile, jar and run all tests"/>
</project>
