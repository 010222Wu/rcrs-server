<project default="jars" name="Robocup rescue simulation software">
  <!-- Common properties: source, build, jar and lib directories -->
  <property name="src.dir" value="${basedir}/src"/>
  <property name="build.dir" value="${basedir}/build"/>
  <property name="classes.dir" value="${build.dir}/classes"/>
  <property name="junit.dir" value="${build.dir}/junit-results"/>
  <property name="checkstyle.dir" value="${build.dir}/checkstyle-results"/>
  <property name="findbugs.dir" value="${build.dir}/findbugs-results"/>
  <property name="jar.dir" value="${basedir}/jars"/>
  <property name="lib.dir" value="${basedir}/lib"/>
  <property name="test.dir" value="${basedir}/test"/>
  <property name="supplement.dir" value="${basedir}/supplement"/>

  <property name="debug" value="true"/>

  <property name="findbugs.home" value="${lib.dir}/findbugs-1.3.8"/>

  <path id="path.jars">
    <fileset dir="${jar.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="path.lib">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="path.all">
    <path refid="path.jars"/>
    <path refid="path.lib"/>
  </path>

  <path id="path.junit">
    <pathelement location="${lib.dir}/junit-4.5.jar"/>
    <path refid="path.all"/>
    <pathelement location="${test.dir}"/>
  </path>

  <!-- Checkstyle task definition -->
  <taskdef resource="checkstyletask.properties" classpath="${lib.dir}/checkstyle-all-5.0-beta2.jar"/>

  <!-- Findbugs task definition -->
  <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.home}/lib/findbugs-ant.jar"/>

  <!-- Stuff to do before a compile -->
  <target name="_init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${junit.dir}"/>
    <mkdir dir="${checkstyle.dir}"/>
    <mkdir dir="${findbugs.dir}"/>
    <mkdir dir="${jar.dir}"/>
  </target>

  <!-- Rescuecore targets -->
  <target name="rescuecore-compile" depends="_init" description="Build the rescuecore package">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="path.all" debug="${debug}">
      <include name="rescuecore/**/*.java"/>
    </javac>
  </target>

  <target name="rescuecore-clean" description="Delete all classes and build artifacts in the rescuecore package">
    <delete dir="${classes.dir}/rescuecore"/>
    <delete dir="${junit.dir}/rescuecore"/>
    <delete dir="${jar.dir}/rescuecore.jar"/>
    <delete>
      <fileset dir="${test.dir}/rescuecore">
        <include name="**/*.class"/>
      </fileset>
    </delete>
  </target>

  <target name="rescuecore-jar" depends="rescuecore-compile" description="Build the rescuecore jar">
    <jar basedir="${classes.dir}" destfile="${jar.dir}/rescuecore.jar">
      <include name="rescuecore/**/*.class"/>
    </jar>
  </target>

  <target name="rescuecore-unit" depends="rescuecore-jar" description="Run the rescuecore unit tests">
    <javac srcdir="${test.dir}" destdir="${test.dir}" classpathref="path.all" debug="${debug}">
      <include name="rescuecore/**/*.java"/>
    </javac>
    <junit fork="true">
      <sysproperty key="rescuecore.tests.basedir" value="${test.dir}"/>
      <classpath refid="path.junit"/>
      <formatter type="xml"/>
      <batchtest todir="${junit.dir}">
        <fileset dir="${test.dir}">
          <include name="rescuecore/**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- Rescuecore2 targets -->
  <target name="rescuecore2-compile" depends="_init" description="Build the rescuecore2 package">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="path.all" debug="${debug}">
      <include name="rescuecore2/**/*.java"/>
    </javac>
  </target>

  <target name="rescuecore2-clean" description="Delete all classes and build artifacts in the rescuecore2 package">
    <delete dir="${classes.dir}/rescuecore2"/>
    <delete dir="${junit.dir}/rescuecore2"/>
    <delete dir="${jar.dir}/rescuecore2.jar"/>
    <delete>
      <fileset dir="${test.dir}/rescuecore2">
        <include name="**/*.class"/>
      </fileset>
    </delete>
  </target>

  <target name="rescuecore2-jar" depends="rescuecore2-compile" description="Build the rescuecore2 jar">
    <jar basedir="${classes.dir}" destfile="${jar.dir}/rescuecore2.jar">
      <include name="rescuecore2/**/*.class"/>
    </jar>
  </target>

  <target name="rescuecore2-unit" depends="rescuecore2-jar" description="Run the rescuecore2 unit tests">
    <javac srcdir="${test.dir}" destdir="${test.dir}" classpathref="path.all" debug="${debug}">
      <include name="rescuecore2/**/*.java"/>
    </javac>
    <junit fork="true">
      <sysproperty key="rescuecore2.tests.basedir" value="${test.dir}"/>
      <classpath refid="path.junit"/>
      <formatter type="xml"/>
      <batchtest todir="${junit.dir}">
        <fileset dir="${test.dir}">
          <include name="rescuecore2/**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- Kernel targets -->
  <target name="kernel-compile" depends="_init,rescuecore2-jar" description="Build the kernel package">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="path.all" debug="${debug}">
      <include name="kernel/**/*.java"/>
    </javac>
  </target>

  <target name="kernel-clean" description="Delete all classes and build artifacts in the kernel package">
    <delete dir="${classes.dir}/kernel"/>
    <delete dir="${junit.dir}/kernel"/>
    <delete dir="${jar.dir}/kernel.jar"/>
  </target>

  <target name="kernel-jar" depends="kernel-compile" description="Build the kernel jar">
    <jar basedir="${classes.dir}" destfile="${jar.dir}/kernel.jar">
      <include name="kernel/**/*.class"/>
    </jar>
  </target>

  <target name="kernel-unit" depends="kernel-jar" description="Run the kernel unit tests">
  </target>

  <!-- Useful tools: checkstyle and findbugs -->
  <target name="checkstyle" depends="compile" description="Run Checkstyle on all packages">
    <checkstyle config="supplement/checkstyle.xml" classpathref="path.all" failOnViolation="false">
      <fileset dir="${src.dir}">
        <include name="kernel/**/*.java"/>
        <include name="rescuecore2/**/*.java"/>
      </fileset>
      <formatter type="xml" toFile="${checkstyle.dir}/checkstyle_errors.xml"/>
    </checkstyle>
    <xslt in="${checkstyle.dir}/checkstyle_errors.xml" out="${checkstyle.dir}/checkstyle_errors.html" style="${supplement.dir}/checkstyle-noframes-sorted.xsl"/>
  </target>

  <target name="findbugs" depends="compile" description="Run Findbugs on all packages">
    <findbugs home="${findbugs.home}" output="html" outputFile="${findbugs.dir}/findbugs_errors.html">
      <sourcePath path="${src.dir}"/>
      <class location="${jar.dir}/kernel.jar"/>
      <class location="${jar.dir}/rescuecore2.jar"/>
      <auxClasspath refid="path.all"/>
    </findbugs>
  </target>

  <target name="unit-test-report">
    <junitreport todir="${junit.dir}">
      <fileset dir="${junit.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="noframes" todir="${junit.dir}"/>
    </junitreport>
  </target>

  <target name="build-clean">
    <delete dir="${build.dir}"/>
  </target>

  <!-- Combined targets -->
  <target name="compile" depends="rescuecore-compile,rescuecore2-compile,kernel-compile" description="Compile all packages"/>

  <target name="jars" depends="rescuecore-jar,rescuecore2-jar,kernel-jar" description="Compile and jar all packages"/>

  <target name="clean" depends="rescuecore-clean,rescuecore2-clean,kernel-clean,build-clean" description="Delete classes and build artifacts for all packages"/>

  <target name="test-static" depends="checkstyle,findbugs" description="Run the static tests (checkstyle and findbugs) for all packages"/>

  <target name="test-unit" depends="rescuecore-unit,rescuecore2-unit,kernel-unit,unit-test-report" description="Run the unit tests for all packages"/>

  <target name="test-all" depends="test-static,test-unit" description="Run the static and unit tests for all packages"/>

  <target name="complete-build" depends="clean,compile,jars,test-all" description="Do a complete clean and rebuild: clean, compile, jar and run all tests"/>
</project>
